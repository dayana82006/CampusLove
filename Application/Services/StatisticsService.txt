using System;
using System.Collections.Generic;
using System.Linq;
using CampusLove.Domain.Entities;
using CampusLove.Domain.Interfaces;

namespace CampusLove.Application.Services
{
    public class StatisticsService
    {
        private readonly IUserStatisticsRepository _statisticsRepository;
        private readonly IInteractionsRepository _interactionsRepository;
        private readonly IMatchesRepository _matchesRepository;
        private readonly IUsersRepository _usersRepository;

        public StatisticsService(
            IUserStatisticsRepository statisticsRepository, 
            IInteractionsRepository interactionsRepository, 
            IMatchesRepository matchesRepository,
            IUsersRepository usersRepository)
        {
            _statisticsRepository = statisticsRepository;
            _interactionsRepository = interactionsRepository;
            _matchesRepository = matchesRepository;
            _usersRepository = usersRepository;
        }

        // Obtener estadísticas de un usuario específico
        public UserStatistics GetUserStatistics(int userId)
        {
            var stats = _statisticsRepository.GetById(userId);
            if (stats == null)
            {
                // Si no existe, crear nuevo registro de estadísticas
                stats = new UserStatistics
                {
                    id_user = userId,
                    last_update = DateTime.Now
                };
                _statisticsRepository.Create(stats);
            }
            return stats;
        }

        // Actualizar estadísticas después de una interacción
        public void UpdateStatisticsAfterInteraction(int originUserId, int targetUserId, string interactionType)
        {
            // Actualizar estadísticas del usuario de origen (quien envió el like/dislike)
            var originStats = GetUserStatistics(originUserId);
            if (interactionType == "like")
            {
                originStats.sent_likes++;
            }
            else if (interactionType == "dislike")
            {
                originStats.sent_dislikes++;
            }
            originStats.last_update = DateTime.Now;
            _statisticsRepository.Update(originStats);

            // Actualizar estadísticas del usuario objetivo (quien recibió el like/dislike)
            var targetStats = GetUserStatistics(targetUserId);
            if (interactionType == "like")
            {
                targetStats.received_likes++;
            }
            else if (interactionType == "dislike")
            {
                targetStats.received_dislikes++;
            }
            targetStats.last_update = DateTime.Now;
            _statisticsRepository.Update(targetStats);
        }

        // Actualizar estadísticas después de un match
        public void UpdateStatisticsAfterMatch(int user1Id, int user2Id)
        {
            // Actualizar estadísticas del primer usuario
            var user1Stats = GetUserStatistics(user1Id);
            user1Stats.total_matches++;
            user1Stats.last_update = DateTime.Now;
            _statisticsRepository.Update(user1Stats);

            // Actualizar estadísticas del segundo usuario
            var user2Stats = GetUserStatistics(user2Id);
            user2Stats.total_matches++;
            user2Stats.last_update = DateTime.Now;
            _statisticsRepository.Update(user2Stats);
        }

        // Obtener usuarios con más likes recibidos
        public List<(Users User, int ReceivedLikes)> GetTopUsersWithMostReceivedLikes(int count = 5)
        {
            var allStatistics = _statisticsRepository.GetAll();
            var allUsers = _usersRepository.GetAll();
            
            return allStatistics
                .OrderByDescending(s => s.received_likes)
                .Take(count)
                .Select(s => 
                {
                    var user = allUsers.FirstOrDefault(u => u.id_user == s.id_user);
                    return (User: user, ReceivedLikes: s.received_likes);
                })
                .Where(tuple => tuple.User != null)
                .ToList();
        }

        // Obtener usuarios con más likes enviados
        public List<(Users User, int SentLikes)> GetTopUsersWithMostSentLikes(int count = 5)
        {
            var allStatistics = _statisticsRepository.GetAll();
            var allUsers = _usersRepository.GetAll();
            
            return allStatistics
                .OrderByDescending(s => s.sent_likes)
                .Take(count)
                .Select(s => 
                {
                    var user = allUsers.FirstOrDefault(u => u.id_user == s.id_user);
                    return (User: user, SentLikes: s.sent_likes);
                })
                .Where(tuple => tuple.User != null)
                .ToList();
        }

        // Obtener usuarios con más matches
        public List<(Users User, int TotalMatches)> GetTopUsersWithMostMatches(int count = 5)
        {
            var allStatistics = _statisticsRepository.GetAll();
            var allUsers = _usersRepository.GetAll();
            
            return allStatistics
                .OrderByDescending(s => s.total_matches)
                .Take(count)
                .Select(s => 
                {
                    var user = allUsers.FirstOrDefault(u => u.id_user == s.id_user);
                    return (User: user, TotalMatches: s.total_matches);
                })
                .Where(tuple => tuple.User != null)
                .ToList();
        }

        // Obtener usuarios más activos (suma de likes y dislikes enviados)
        public List<(Users User, int TotalActivity)> GetMostActiveUsers(int count = 5)
        {
            var allStatistics = _statisticsRepository.GetAll();
            var allUsers = _usersRepository.GetAll();
            
            return allStatistics
                .OrderByDescending(s => s.sent_likes + s.sent_dislikes)
                .Take(count)
                .Select(s => 
                {
                    var user = allUsers.FirstOrDefault(u => u.id_user == s.id_user);
                    return (User: user, TotalActivity: s.sent_likes + s.sent_dislikes);
                })
                .Where(tuple => tuple.User != null)
                .ToList();
        }

        // Obtener usuarios más populares (ratio de likes recibidos respecto al total de interacciones recibidas)
        public List<(Users User, double Popularity)> GetMostPopularUsers(int count = 5, int minimumInteractions = 5)
        {
            var allStatistics = _statisticsRepository.GetAll();
            var allUsers = _usersRepository.GetAll();
            
            return allStatistics
                .Where(s => (s.received_likes + s.received_dislikes) >= minimumInteractions)
                .Select(s => 
                {
                    var user = allUsers.FirstOrDefault(u => u.id_user == s.id_user);
                    double totalInteractions = s.received_likes + s.received_dislikes;
                    double popularity = totalInteractions > 0 ? (double)s.received_likes / totalInteractions * 100 : 0;
                    return (User: user, Popularity: popularity);
                })
                .Where(tuple => tuple.User != null)
                .OrderByDescending(tuple => tuple.Popularity)
                .Take(count)
                .ToList();
        }

        // Reconstruir todas las estadísticas desde cero basándose en las interacciones y matches existentes
        public void RebuildAllStatistics()
        {
            // Obtener todos los usuarios
            var allUsers = _usersRepository.GetAll();
            var allInteractions = _interactionsRepository.GetAll();
            var allMatches = _matchesRepository.GetAll();
            
            foreach (var user in allUsers)
            {
                var stats = new UserStatistics
                {
                    id_user = user.id_user,
                    received_likes = allInteractions.Count(i => i.id_user_target == user.id_user && i.interaction_type == "like"),
                    received_dislikes = allInteractions.Count(i => i.id_user_target == user.id_user && i.interaction_type == "dislike"),
                    sent_likes = allInteractions.Count(i => i.id_user_origin == user.id_user && i.interaction_type == "like"),
                    sent_dislikes = allInteractions.Count(i => i.id_user_origin == user.id_user && i.interaction_type == "dislike"),
                    total_matches = allMatches.Count(m => m.id_user1 == user.id_user || m.id_user2 == user.id_user),
                    last_update = DateTime.Now
                };
                
                var existingStats = _statisticsRepository.GetById(user.id_user);
                if (existingStats != null)
                {
                    _statisticsRepository.Update(stats);
                }
                else
                {
                    _statisticsRepository.Create(stats);
                }
            }
        }

        // Verificar si es necesario reconstruir las estadísticas
        public bool ShouldRebuildStatistics()
        {
            // Si hay usuarios sin estadísticas, debemos reconstruir
            var allUsers = _usersRepository.GetAll();
            var allStats = _statisticsRepository.GetAll();
            
            // Si hay menos estadísticas que usuarios, necesitamos reconstruir
            if (allStats.Count() < allUsers.Count())
            {
                return true;
            }
            
            return false;
        }
    }
}