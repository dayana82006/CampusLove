using System;
using CampusLove.Application.Services;
using CampusLove.Domain.Ports;
using CampusLove.Domain.Interfaces;

namespace CampusLove.Application.UI.Admin.City
{
    public class UICity
    {
        private readonly CityService _servicio;
        private readonly StateService _stateService;

        public UICity(IDbFactory factory)
        {
            if (factory == null)
                throw new ArgumentNullException(nameof(factory));

            var cityRepo = factory.CreateCitiesRepository();
            var stateRepo = factory.CreateStatesRepository();

            _servicio = new CityService(cityRepo, stateRepo); 
            _stateService = new StateService(stateRepo);      
        }


        public void GestionarCities()
        {
            while (true)
            {
                Console.Clear();
                Console.WriteLine();
                Console.WriteLine("             ‚ãÜÔΩ°‚ÄßÀö öüåÜ…ûÀö‚ÄßÔΩ°‚ãÜ");
                Console.WriteLine("   ‚≠í‚ùÉ.‚úÆ:‚ñπ Men√∫ de Ciudades ‚óÉ:‚úÆ.‚ùÉ‚≠í");
                Console.WriteLine();

                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine(" ‚§ú‚ô°‚Üí 1. Ver todas las ciudades üèôÔ∏è");
                Console.WriteLine(" ‚§ú‚ô°‚Üí 2. Agregar una ciudad nueva üèóÔ∏è");
                Console.WriteLine(" ‚§ú‚ô°‚Üí 3. Actualizar una ciudad ‚úèÔ∏è");
                Console.WriteLine(" ‚§ú‚ô°‚Üí 4. Eliminar una ciudad ‚ùå");
                Console.WriteLine(" ‚§ú‚ô°‚Üí 0. Volver al men√∫ principal ‚Ü©Ô∏è");
                Console.ResetColor();

                var opcion = Console.ReadLine();

                if (string.IsNullOrEmpty(opcion))
                {
                    Console.WriteLine("‚ùå Debes ingresar una opci√≥n.");
                    Console.ReadKey();
                    continue;
                }

                try
                {
                    switch (opcion)
                    {
                        case "1":
                            _servicio.ShowAll();
                            break;
                        case "2":
                            var crear = new CreateCity(_servicio, _stateService);
                            crear.Ejecutar();
                            break;
                        case "3":
                            var actualizar = new UpdateCity(_servicio, _stateService);
                            actualizar.Ejecutar();
                            break;
                        case "4":
                            var eliminar = new DeleteCity(_servicio);
                            eliminar.Ejecutar();
                            break;
                        case "0":
                            return;
                        default:
                            Console.WriteLine("‚ùå Opci√≥n no v√°lida.");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è Ocurri√≥ un error: {ex.Message}");
                }

                Console.WriteLine("\nPresiona una tecla para continuar...");
                Console.ReadKey();
            }
        }
    }
}
