using System;
using CampusLove.Domain.Entities;
using CampusLove.Application.Services;

namespace CampusLove.Application.UI.Admin.Countries
{
    public class CreateState
    {
        private readonly StateService _servicio;
        private readonly CountryService _countryService;

        public CreateState(StateService servicio, CountryService countryService)
        {
            _servicio = servicio ?? throw new ArgumentNullException(nameof(servicio));
            _countryService = countryService ?? throw new ArgumentNullException(nameof(countryService));
        }

        public void Ejecutar()
        {
            var state = new States();

            Console.Write("Nombre del estado: ");
            state.state_name = Console.ReadLine()?.Trim();

            if (string.IsNullOrWhiteSpace(state.state_name))
            {
                Console.WriteLine("‚ùå El nombre no puede estar vac√≠o.");
                return;
            }

            // Mostrar lista de pa√≠ses
            Console.WriteLine("\nüìã Lista de pa√≠ses disponibles:");
            _countryService.ShowAll();

            Console.Write("ID del pa√≠s al que pertenece este estado: ");
            if (!int.TryParse(Console.ReadLine(), out int countryId))
            {
                Console.WriteLine("‚ùå ID inv√°lido. Debe ser un n√∫mero entero.");
                return;
            }

            var country = _countryService.GetById(countryId);
            if (country == null)
            {
                Console.WriteLine("‚ùå Pa√≠s no encontrado. Aseg√∫rate de que el ID existe.");
                return;
            }

            state.id_country = countryId;

            _servicio.CreateState(state);
            Console.WriteLine("‚úÖ Estado creado con √©xito.");
        }
    }
}
